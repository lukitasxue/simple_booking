# Database Setup and Schema Synchronization

This guide explains how to set up and manage your Supabase databases for both development and production environments.

## üóÑÔ∏è Database Configuration

You have two Supabase projects:
- **Development**: `skedy-dev` (yxavypxuzpjejkezwzjl) 
- **Production**: `skedy-prod` (itjtaeggupasvrepfkcw)

## üìã Setup Steps

### 1. Environment Variables Setup

First, create your environment file:

```bash
cp env.sample .env.local
```

Then update `.env.local` with your actual Supabase credentials from the Supabase dashboard:

```env
# Development Database (skedy-dev)
NEXT_PUBLIC_SUPABASE_URL=https://yxavypxuzpjejkezwzjl.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_actual_dev_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_actual_dev_service_role_key
DATABASE_URL=your_actual_dev_database_url

# Production Database (for schema sync)
SUPABASE_PROD_URL=https://itjtaeggupasvrepfkcw.supabase.co
SUPABASE_PROD_ANON_KEY=your_actual_prod_anon_key
SUPABASE_PROD_SERVICE_ROLE_KEY=your_actual_prod_service_role_key
SUPABASE_PROD_DATABASE_URL=your_actual_prod_database_url

# Database password for CLI operations
DB_PASSWORD=your_database_password
```

### 2. Get Credentials from Supabase Dashboard

For each project (dev and prod), go to:
- **URL & Anon Key**: Project Settings ‚Üí API ‚Üí Project URL & anon/public key
- **Service Role Key**: Project Settings ‚Üí API ‚Üí service_role key (keep secret!)
- **Database URL**: Project Settings ‚Üí Database ‚Üí Connection string ‚Üí Nodejs
- **Database Password**: The password you set when creating the project

### 3. Initial Schema Setup

Once your environment is configured:

```bash
# Check environment setup
npm run db:check-env

# Link to development database and pull current schema
npm run db:link-dev
npm run db:pull-dev
```

This will:
- Link your project to the development database
- Pull the current schema and create migration files
- Set up the proper migration structure

## üîÑ Common Workflows

### üéØ Schema-First Approach (Recommended)

**The most intuitive way - edit one file, auto-generate migrations:**

1. **Edit the schema file:** `supabase/schema.sql`
   ```sql
   -- Add a new table
   CREATE TABLE payments (
       id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
       "bookingId" UUID REFERENCES bookings(id),
       amount INTEGER NOT NULL,
       status TEXT DEFAULT 'pending'
   );
   ```

2. **Generate migration automatically:**
   ```bash
   npm run db:schema-diff-dev    # Compare schema.sql vs current dev DB
   ```

3. **Apply to development:**
   ```bash
   npm run db:schema-apply-dev   # Apply changes to dev
   ```

4. **Deploy to production:**
   ```bash
   npm run db:schema-apply-prod  # Deploy to production
   ```

### üìä Dashboard Approach

**Visual editing in Supabase Dashboard:**

1. **Make changes** in Supabase Dashboard (Table Editor/SQL Editor)

2. **Pull changes automatically:**
   ```bash
   npm run db:pull-dev           # Auto-generate migration from dashboard changes
   ```

3. **Deploy to production:**
   ```bash
   npm run db:push-prod          # Apply to production
   ```

### üõ†Ô∏è Manual Migration Approach

**For complex custom changes:**

1. **Create a new migration:**
   ```bash
   npm run db:new-migration "add_new_table"
   ```

2. **Edit the migration file** in `supabase/migrations/`

3. **Push to development:**
   ```bash
   npm run db:push-dev
   ```

4. **Deploy to production:**
   ```bash
   npm run db:push-prod
   ```

### Syncing Schemas Between Environments

**From Production to Development:**
```bash
npm run db:pull-prod    # Pull latest from production
npm run db:push-dev     # Apply to development
```

**From Development to Production:**
```bash
npm run db:push-prod    # Deploy dev changes to production
```

### Checking Differences

```bash
npm run db:diff         # Show schema differences
```

## üìù Available Commands

### üéØ Schema-First Commands (Recommended)
| Command | Description |
|---------|-------------|
| `npm run db:schema-diff-dev` | Generate migration from `schema.sql` vs dev |
| `npm run db:schema-diff-prod` | Generate migration from `schema.sql` vs prod |
| `npm run db:schema-apply-dev` | Apply schema changes to development |
| `npm run db:schema-apply-prod` | Apply schema changes to production |

### üìä Dashboard-Based Commands
| Command | Description |
|---------|-------------|
| `npm run db:pull-dev` | Pull schema from development dashboard |
| `npm run db:pull-prod` | Pull schema from production dashboard |
| `npm run db:push-dev` | Push migrations to development |
| `npm run db:push-prod` | Push migrations to production |

### üõ†Ô∏è Management Commands
| Command | Description |
|---------|-------------|
| `npm run db:help` | Show all available commands |
| `npm run db:check-env` | Check environment setup |
| `npm run db:link-dev` | Link to development database |
| `npm run db:link-prod` | Link to production database |
| `npm run db:new-migration <name>` | Create new migration |
| `npm run db:diff` | Show schema differences |
| `npm run db:reset` | Reset local database |

## üîí Security Notes

- Keep your `service_role` keys secret
- Never commit `.env.local` to git
- Use environment variables in production deployment
- The `anon` key is safe to expose in your frontend code

## üöÄ Production Deployment

For production deployment, set these environment variables in your hosting platform:

```env
NEXT_PUBLIC_SUPABASE_URL=https://itjtaeggupasvrepfkcw.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_prod_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_prod_service_role_key
DATABASE_URL=your_prod_database_url
```

## üîÑ Synchronization Workflow

The setup ensures that:
1. **Development changes** can be easily pushed to production
2. **Schema migrations** are version controlled
3. **Both environments** stay in sync
4. **Rollbacks** are possible through migration history

## ‚ö° Quick Start

1. `cp env.sample .env.local` - Copy environment template
2. Update `.env.local` with real credentials
3. `npm run db:check-env` - Verify setup
4. `npm run db:pull-dev` - Get current schema
5. Start developing! üéâ 